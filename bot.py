import logging
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

logging.basicConfig (level= logging.INFO)

bot = Bot("5656387036:AAHwrd28ThB1YOwM4jHqAom8LgnCgo8svXA")
dp = Dispatcher(bot, storage=MemoryStorage())

class reg_states(StatesGroup):
    name = State()
    phone = State()
    main_menu = State()
    personal_cab = State()
    new_recipe = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    use_tg_first_name = types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ –∏–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ")
    markup.add(use_tg_first_name)
    await bot.send_message(message.chat.id,
                     f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –∫ –≤–∞–º –æ–±—Ä–∞—â–∞–ª–∏—Å—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.",
                     reply_markup=markup)
    await reg_states.name.set()
@dp.message_handler(state=reg_states.name)
async def get_name(message: types.Message, state: FSMContext):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    use_tg_phone = types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É", request_contact=True)
    markup.add(use_tg_phone)
    if message.chat.type == 'private':
        if message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ –∏–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ":
            user_name = message.from_user.first_name

        else:
            user_name = message.text
        await state.update_data(name=user_name)
        await bot.send_message(message.chat.id,
                                f"–•–æ—Ä–æ—à–æ, {user_name}, —Ç–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω.",
                                reply_markup=markup)
        await reg_states.phone.set()

@dp.message_handler(state=reg_states.phone, content_types= types.ContentTypes.CONTACT)
async def get_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as user:
        if message.chat.type == 'private':
            if message.contact is not None:
                user['phone'] = message.contact.phone_number
            else:
                user['phone'] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
        markup.add(go_to_main_menu)
        await bot.send_message(message.chat.id,
                                   f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                                   f"–í–∞—à–µ –∏–º—è: {user['name']}\n"
                                   f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{user['phone']}",
                               reply_markup=markup)


        await reg_states.main_menu.set()


@dp.message_handler(state=reg_states.main_menu)
async def main_menu(message: types.Message, state: FSMContext):
    main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    new_recipe_button = types.KeyboardButton("–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üòã")
    pers_cab_button = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§")
    main_menu_markup.add(new_recipe_button, pers_cab_button)
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö":
        await bot.send_message(message.chat.id,
                            f"–ß–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–∞–∫–æ–º–∏—Ç—å—Å—è? –ß—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, –∏–ª–∏ –≤–∞–º–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º–æ–µ?",
                            reply_markup=main_menu_markup)
    if message.text == "–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üòã":
        new_recipe_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        rand_recipe_button = types.KeyboardButton("–õ—é–±–æ–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üçΩ")
        nongluten_recipe_button = types.KeyboardButton("–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üç™")
        vegetarian_recipe_button = types.KeyboardButton("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç–∏–∫ü•ó")
        nonlactose_recipe_button = types.KeyboardButton("–ë–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üç∞")
        go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
        new_recipe_markup.add(vegetarian_recipe_button, nongluten_recipe_button,
                              nonlactose_recipe_button, rand_recipe_button, go_to_main_menu)
        await bot.send_message(message.chat.id,
                               f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                               reply_markup=new_recipe_markup)
        await reg_states.new_recipe.set()
    if message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§":
        async with state.proxy() as user:
            pers_cab_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            liked_recipes_button = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç–∏–∫–∏‚ù§")
            go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
            pers_cab_markup.add(liked_recipes_button, go_to_main_menu)
            await bot.send_message(message.chat.id,
                                   "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.\n"
                                   f"–í–∞—à–µ –∏–º—è {user['name']}\n"
                                   f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user['phone']}",
                                   reply_markup=pers_cab_markup)
        await reg_states.personal_cab.set()

@dp.message_handler(state=reg_states.personal_cab)
async def pers_cab(message: types.Message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö":
        main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        new_recipe_button = types.KeyboardButton("–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üòã")
        pers_cab_button = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§")
        main_menu_markup.add(new_recipe_button, pers_cab_button)
        await bot.send_message(message.chat.id,
                            f"–ß–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–∞–∫–æ–º–∏—Ç—å—Å—è? –ß—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, –∏–ª–∏ –≤–∞–º–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º–æ–µ?",
                            reply_markup=main_menu_markup)
        await reg_states.main_menu.set()
    if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç–∏–∫–∏‚ù§":
        liked_recipes_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        go_forward = types.KeyboardButton("–í–ø–µ—Ä—ë–¥‚û°Ô∏è")
        go_back = types.KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
        go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
        liked_recipes_markup.add(go_back, go_forward, go_to_main_menu)
        await bot.send_message(message.chat.id,
                         "–í–æ—Ç –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç–∏–∫–∏:",
                               reply_markup=liked_recipes_markup)

@dp.message_handler(state=reg_states.new_recipe)
async def new_recipe(message: types.Message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö":
        main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        new_recipe_button = types.KeyboardButton("–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üòã")
        pers_cab_button = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§")
        main_menu_markup.add(new_recipe_button, pers_cab_button)
        await bot.send_message(message.chat.id,
                            f"–ß–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–∞–∫–æ–º–∏—Ç—å—Å—è? –ß—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, –∏–ª–∏ –≤–∞–º–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º–æ–µ?",
                            reply_markup=main_menu_markup)
        await reg_states.main_menu.set()
    like_dislike_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    like_button = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚ù§")
    dislike_button = types.KeyboardButton("–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—åüëé")
    go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
    like_dislike_markup.add(like_button, dislike_button, go_to_main_menu)
    if message.text == "–õ—é–±–æ–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üçΩ":
        await bot.send_message(message.chat.id,
                               "–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:",
                               reply_markup=like_dislike_markup)

    if message.text == "–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üç™":
        await bot.send_message(message.chat.id,
                               "–í–æ—Ç –≤–∞—à–µ –±–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–æ–µ –±–ª—é–¥–æ:",
                               reply_markup=like_dislike_markup)
    if message.text == "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç–∏–∫ü•ó":
        await bot.send_message(message.chat.id,
                               "–í–æ—Ç –≤–∞—à–µ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ –±–ª—é–¥–æ:",
                               reply_markup=like_dislike_markup)
    if message.text == "–ë–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç–∏–∫üç∞":
        await bot.send_message(message.chat.id,
                               "–í–æ—Ç –≤–∞—à–µ –±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω–æ–µ –±–ª—é–¥–æ:",
                               reply_markup=like_dislike_markup)

if __name__ == "__main__":
    executor.start_polling(dp)
